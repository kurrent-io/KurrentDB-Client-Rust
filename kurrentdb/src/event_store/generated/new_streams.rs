// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProtocolDataUnit {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(map = "string, message", tag = "2")]
    pub properties: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        DynamicValue,
    >,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// Record to be appended to a stream.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendRecord {
    /// Universally Unique identifier for the record.
    /// If not provided, the server will generate a new one.
    #[prost(string, optional, tag = "1")]
    pub record_id: ::core::option::Option<::prost::alloc::string::String>,
    /// A collection of properties providing additional system information about the
    /// record.
    #[prost(map = "string, message", tag = "2")]
    pub properties: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        DynamicValue,
    >,
    /// The actual data payload of the record, stored as bytes.
    ///
    ///   // Optional timestamp indicating when the record was created.
    ///   // If not provided, the server will use the current time.
    ///   optional google.protobuf.Timestamp timestamp = 4;
    #[prost(bytes = "bytes", tag = "3")]
    pub data: ::prost::bytes::Bytes,
}
/// Represents the input for appending records to a specific stream.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendStreamRequest {
    /// The name of the stream to append records to.
    #[prost(string, tag = "1")]
    pub stream: ::prost::alloc::string::String,
    /// The records to append to the stream.
    #[prost(message, repeated, tag = "2")]
    pub records: ::prost::alloc::vec::Vec<AppendRecord>,
    /// The expected revision of the stream. If the stream's current revision does
    /// not match, the append will fail.
    /// The expected revision can also be one of the special values
    /// from ExpectedRevisionConstants.
    /// Missing value means no expectation, the same as EXPECTED_REVISION_CONSTANTS_ANY
    #[prost(sint64, optional, tag = "3")]
    pub expected_revision: ::core::option::Option<i64>,
}
/// Success represents the successful outcome of an append operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendStreamSuccess {
    /// The name of the stream to which records were appended.
    #[prost(string, tag = "1")]
    pub stream: ::prost::alloc::string::String,
    /// The position of the last appended record in the stream.
    #[prost(int64, tag = "2")]
    pub position: i64,
    /// The expected revision of the stream after the append operation.
    #[prost(int64, tag = "3")]
    pub stream_revision: i64,
}
/// Failure represents the detailed error information when an append operation fails.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendStreamFailure {
    /// The name of the stream to which records were appended.
    #[prost(string, tag = "1")]
    pub stream: ::prost::alloc::string::String,
    /// The error details
    #[prost(oneof = "append_stream_failure::Error", tags = "2, 3, 4")]
    pub error: ::core::option::Option<append_stream_failure::Error>,
}
/// Nested message and enum types in `AppendStreamFailure`.
pub mod append_stream_failure {
    /// The error details
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Error {
        /// Failed because the actual stream revision didn't match the expected revision.
        #[prost(message, tag = "2")]
        WrongExpectedRevision(super::error_details::WrongExpectedRevision),
        /// Failed because the client lacks sufficient permissions.
        #[prost(message, tag = "3")]
        AccessDenied(super::error_details::AccessDenied),
        /// Failed because the target stream has been deleted.
        #[prost(message, tag = "4")]
        StreamDeleted(super::error_details::StreamDeleted),
    }
}
/// AppendStreamOutput represents the output of appending records to a specific
/// stream.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendStreamResponse {
    /// The result of the append operation.
    #[prost(oneof = "append_stream_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<append_stream_response::Result>,
}
/// Nested message and enum types in `AppendStreamResponse`.
pub mod append_stream_response {
    /// The result of the append operation.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        /// Success represents the successful outcome of an append operation.
        #[prost(message, tag = "1")]
        Success(super::AppendStreamSuccess),
        /// Failure represents the details of a failed append operation.
        #[prost(message, tag = "2")]
        Failure(super::AppendStreamFailure),
    }
}
/// MultiStreamAppendRequest represents a request to append records to multiple streams.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiStreamAppendRequest {
    /// A list of AppendStreamInput messages, each representing a stream to which records should be appended.
    #[prost(message, repeated, tag = "1")]
    pub input: ::prost::alloc::vec::Vec<AppendStreamRequest>,
}
/// Response from the MultiStreamAppend operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiStreamAppendResponse {
    #[prost(oneof = "multi_stream_append_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<multi_stream_append_response::Result>,
}
/// Nested message and enum types in `MultiStreamAppendResponse`.
pub mod multi_stream_append_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Success {
        #[prost(message, repeated, tag = "1")]
        pub output: ::prost::alloc::vec::Vec<super::AppendStreamSuccess>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Failure {
        #[prost(message, repeated, tag = "1")]
        pub output: ::prost::alloc::vec::Vec<super::AppendStreamFailure>,
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        /// Success represents the successful outcome of a multi-stream append operation.
        #[prost(message, tag = "1")]
        Success(Success),
        /// Failure represents the details of a failed multi-stream append operation.
        #[prost(message, tag = "2")]
        Failure(Failure),
    }
}
/// ErrorDetails provides detailed information about specific error conditions.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ErrorDetails {}
/// Nested message and enum types in `ErrorDetails`.
pub mod error_details {
    /// When the user does not have sufficient permissions to perform the operation.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccessDenied {
        /// The simplified reason for access denial.
        #[prost(string, tag = "1")]
        pub reason: ::prost::alloc::string::String,
    }
    /// When the stream has been deleted.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct StreamDeleted {
        /// The time when the stream was deleted.
        #[prost(message, optional, tag = "1")]
        pub deleted_at: ::core::option::Option<::prost_types::Timestamp>,
        /// If the stream was hard deleted, you cannot reuse the stream name,
        /// it will raise an exception if you try to append to it again.
        #[prost(bool, tag = "2")]
        pub tombstoned: bool,
    }
    /// When the expected revision of the stream does not match the actual revision.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct WrongExpectedRevision {
        /// The actual revision of the stream.
        #[prost(int64, tag = "1")]
        pub stream_revision: i64,
    }
    /// When the transaction exceeds the maximum size allowed
    /// (its bigger than the configured chunk size).
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct TransactionMaxSizeExceeded {
        /// The maximum allowed size of the transaction.
        #[prost(uint32, tag = "1")]
        pub max_size: u32,
    }
}
/// Represents a list of dynamically typed values.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDynamicValue {
    /// Repeated property of dynamically typed values.
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<DynamicValue>,
}
/// Represents a dynamic value
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicValue {
    #[prost(oneof = "dynamic_value::Kind", tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10")]
    pub kind: ::core::option::Option<dynamic_value::Kind>,
}
/// Nested message and enum types in `DynamicValue`.
pub mod dynamic_value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        /// Represents a null value.
        #[prost(enumeration = "::prost_types::NullValue", tag = "1")]
        NullValue(i32),
        /// Represents a 32-bit signed integer value.
        #[prost(sint32, tag = "2")]
        Int32Value(i32),
        /// Represents a 64-bit signed integer value.
        #[prost(sint64, tag = "3")]
        Int64Value(i64),
        /// Represents a byte array value.
        #[prost(bytes, tag = "4")]
        BytesValue(::prost::bytes::Bytes),
        /// Represents a 64-bit double-precision floating-point value.
        #[prost(double, tag = "5")]
        DoubleValue(f64),
        /// Represents a 32-bit single-precision floating-point value
        #[prost(float, tag = "6")]
        FloatValue(f32),
        /// Represents a string value.
        #[prost(string, tag = "7")]
        StringValue(::prost::alloc::string::String),
        /// Represents a boolean value.
        #[prost(bool, tag = "8")]
        BooleanValue(bool),
        /// Represents a timestamp value.
        #[prost(message, tag = "9")]
        TimestampValue(::prost_types::Timestamp),
        /// Represents a duration value.
        ///
        ///     // Represents a list of dynamic values.
        ///     ListDynamicValue list_value = 11;
        ///     // Represents a json struct
        ///     google.protobuf.Struct struct_value = 12;
        #[prost(message, tag = "10")]
        DurationValue(::prost_types::Duration),
    }
}
/// Constants that match the expected state of a stream during an
/// append operation. It can be used to specify whether the stream should exist,
/// not exist, or can be in any state.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ExpectedRevisionConstants {
    /// The stream should exist and the expected revision should match the current
    SingleEvent = 0,
    /// It is not important whether the stream exists or not.
    Any = -2,
    /// The stream should not exist. If it does, the append will fail.
    NoStream = -1,
    /// The stream should exist
    Exists = -4,
}
impl ExpectedRevisionConstants {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SingleEvent => "EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT",
            Self::Any => "EXPECTED_REVISION_CONSTANTS_ANY",
            Self::NoStream => "EXPECTED_REVISION_CONSTANTS_NO_STREAM",
            Self::Exists => "EXPECTED_REVISION_CONSTANTS_EXISTS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT" => Some(Self::SingleEvent),
            "EXPECTED_REVISION_CONSTANTS_ANY" => Some(Self::Any),
            "EXPECTED_REVISION_CONSTANTS_NO_STREAM" => Some(Self::NoStream),
            "EXPECTED_REVISION_CONSTANTS_EXISTS" => Some(Self::Exists),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod streams_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct StreamsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl StreamsServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> StreamsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> StreamsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            StreamsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Executes an atomic operation to append records to multiple streams.
        /// This transactional method ensures that all appends either succeed
        /// completely, or are entirely rolled back, thereby maintaining strict data
        /// consistency across all involved streams.
        pub async fn multi_stream_append(
            &mut self,
            request: impl tonic::IntoRequest<super::MultiStreamAppendRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MultiStreamAppendResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kurrentdb.protocol.v2.StreamsService/MultiStreamAppend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "kurrentdb.protocol.v2.StreamsService",
                        "MultiStreamAppend",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Streaming version of MultiStreamAppend that allows clients to send multiple
        /// append requests over a single connection. When the stream completes, all
        /// records are appended transactionally (all succeed or fail together).
        /// Provides improved efficiency for high-throughput scenarios while
        /// maintaining the same transactional guarantees.
        pub async fn multi_stream_append_session(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::AppendStreamRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::MultiStreamAppendResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/kurrentdb.protocol.v2.StreamsService/MultiStreamAppendSession",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "kurrentdb.protocol.v2.StreamsService",
                        "MultiStreamAppendSession",
                    ),
                );
            self.inner.client_streaming(req, path, codec).await
        }
    }
}
